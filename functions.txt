Python funcation definition:
A funcation is a block of reusable code that is used to perform a specific action. The advantages of using functions are.
1. Reducing duplication of code
2. Decomposing complex problem into simpler pieces
3. Improving clarity of the code
4. resuse of code
5. infomation hiding
Functions in Python are first-class citizens. It means that functions have equal status with other objects in Python. Functions can be assigned to variables, stored in collections, or passed as arguments. This brings additional flexibility to the language.

Python function types:
There are two basic types of functions: built-in functions and user defined functions. The built-in functions are part of the Python language; for instance dir(), len(), or abs(). The user defined functions are functions created with the def keyword.

Python creating fuction():
A function is created with def keyword. The statements in the block of the function must be inented.
def function():
    pass
The def keyword is followed by the function name with round brackets and a colon. The indented statements form a body of the function.

The function is later executed when needed. We say that we call the function. If we call a function, the statements inside the function body are executed. They are not executed until the function is called.

myfunc()
To call a function, we specify the function name with the round brackets.
syntax:
Definitions of functions must precede their usage. Otherwise the interpreter will complain with a NameError.
# func_prec.py
def f1():
    print("f1()")
f1()
#f2()

def f2():
    print("f2()")
In the above example, we have two definitions of functions. One line is commented. A function call cannot be ahead of its definition.
Note: We can call the f2() only after its definition. Uncommenting the line we get a NameError.

# Where to define funcations():
Functions can be defined inside a module, a class, or another function. Function defined inside a class is called a method.
1. calling a function from another funcation:
syntax:
def f1():
	print("f1()")

def f2():
	f1()
	print("f2()")
f2()
output:
f1()
f2()
explanantion:
we have defined two funcation f1 and f2. where we have called function F2() first and then line control will go for  def f2(). interpeter first it will read the f2 and will go the inside. then we have meantion f1() inside the f2, so line control will to f1() and then execute the function f1() first and will come back to line funcation2. the output would be f1() and then f2().
