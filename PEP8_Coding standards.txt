PEP8:
PEP stands for Python Enhancement Proposals.
code layout:
Indentation:
Use 4 spaces per indentation level.

correct:
1.foo = long_function_name(var_one, var_two,
                         var_three, var_four)
2.def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)

3.foo = long_function_name(
    var_one, var_two,
    var_three, var_four)

# Wrong:

1.foo = long_function_name(var_one, var_two,
    var_three, var_four)

2.def long_function_name(
    var_one, var_two, var_three,
    var_four):
    print(var_one)

3.foo = long_function_name(
  var_one, var_two,
  var_three, var_four)

When the conditional part of an if-statement is long enough to require that it be written across multiple lines, 
it’s worth noting that the combination of a two character keyword 
if (this_is_one_thing and
    that_is_another_thing):
    do_something()

Tabs or Spaces?
Spaces are the preferred indentation method.
Tabs should be used solely to remain consistent with code that is already indented with tabs.
Python disallows mixing tabs and spaces for indentation.

Maximum Line Length:

Limit all lines to a maximum of 79 characters
docstrings or comments -the line length should be limited to 72 characters.
with open('/path/to/some/file/you/want/to/read') as file_1, \
     open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())

Should a Line Break Before or After a Binary Operator?
Wrong:
# operators sit far away from their operands
income = (gross_wages +
          taxable_interest +
          (dividends - qualified_dividends) -
          ira_deduction -
          student_loan_interest)

Correct:

income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)

Blank Lines:
Surround top-level function and class definitions with two blank lines.

Method definitions inside a class are surrounded by a single blank line.

Extra blank lines may be used (sparingly) to separate groups of related functions.
Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).

Source File Encoding:
Code in the core Python distribution should always use UTF-8, and should not have an encoding declaration.
All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible.

Imports:

# Correct:
import os
import sys

# Wrong:
import sys, os

# Correct:
from subprocess import Popen, PIPE

Module Level Dunder Names:

Module level “dunders” (i.e. names with two leading and two trailing underscores) such as __all__, __author__, __version__, etc. 
should be placed after the module docstring but before any import statements except from __future__ imports. 
Python mandates that future-imports must appear in the module before any other code except docstrings:

"""This is the example module.

This module does stuff.
"""

from __future__ import barry_as_FLUFL

__all__ = ['a', 'b', 'c']
__version__ = '0.1'
__author__ = 'Cardinal Biggles'

import os
import sys

String Quotes:
In Python, single-quoted strings and double-quoted strings are the same. This PEP does not make a recommendation for this.
Pick a rule and stick to it. When a string contains single or double quote characters, however, use the other one to avoid backslashes in the string. 
It improves readability.

Whitespace in Expressions and Statements:
Pet Peeves:
Immediately inside parentheses, brackets or braces:
Correct:
spam(ham[1], {eggs: 2})
Wrong:
spam( ham[ 1 ], { eggs: 2 } )

Between a trailing comma and a following close parenthesis:
 Correct:
foo = (0,)
 Wrong:
bar = (0, )

Immediately before a comma, semicolon, or colon:
Correct:
if x == 4: print(x, y); x, y = y, x
 Wrong:
if x == 4 : print(x , y) ; x , y = y , x

Correct:
ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]
ham[lower:upper], ham[lower:upper:], ham[lower::step]

Wrong:
ham[lower + offset:upper + offset]
ham[1: 9], ham[1 :9], ham[1:9 :3]

More than one space around an assignment (or other) operator to align it with another:
Correct:
x = 1
y = 2
long_variable = 3

Wrong:
x             = 1
y             = 2
long_variable = 3

Function annotations should use the normal rules for colons and always have spaces around the -> arrow if present.
(See Function Annotations below for more about function annotations.):
Correct:
def munge(input: AnyStr): ...
def munge() -> PosInt: ...

Wrong:
def munge(input:AnyStr): ...
def munge()->PosInt: ...

Don’t use spaces around the = sign when used to indicate a keyword argument, or when used to indicate a default value for an unannotated function parameter:
Correct:
def complex(real, imag=0.0):
    return magic(r=real, i=imag)

Wrong:
def complex(real, imag = 0.0):
    return magic(r = real, i = imag)

When combining an argument annotation with a default value, however, do use spaces around the = sign:

# Correct:
def munge(sep: AnyStr = None): ...
def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...
# Wrong:
def munge(input: AnyStr=None): ...
def munge(input: AnyStr, limit = 1000): ...

Compound statements:

# Correct:
if foo == 'blah':
    do_blah_thing()
do_one()
do_two()
do_three()
Rather not:

# Wrong:
if foo == 'blah': do_blah_thing()
do_one(); do_two(); do_three()

When to Use Trailing Commas:
Trailing commas are usually optional, except they are mandatory when making a tuple of one element. 
For clarity, it is recommended to surround the latter in (technically redundant) parentheses:

# Correct:
FILES = ('setup.cfg',)
# Wrong:
FILES = 'setup.cfg',

Comments:
Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!

Comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter
(never alter the case of identifiers!).

Block Comments:
Block comments generally apply to some (or all) code that follows them,
and are indented to the same level as that code. Each line of a block comment starts with a # and a single space

Inline Comments:
Use inline comments sparingly.
An inline comment is a comment on the same line as a statement.
x = x + 1                 # Increment x
But sometimes, this is useful:

x = x + 1                 # Compensate for border

Documentation Strings:
"""Return a foobang

Optional plotz says to frobnicate the bizbaz first.
"""

Naming Conventions:
The naming conventions of Python’s library are a bit of a mess, so we’ll never get this completely consistent – nevertheless,
 here are the currently recommended naming standards.

