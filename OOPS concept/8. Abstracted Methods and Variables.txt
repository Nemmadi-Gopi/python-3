from abc import ABCMeta, abstractmethod
class Shape:
    __metaclass__ = ABCMeta 
    def __init__ (self, shapeType):
        self.shapeType = shape Type
    @abstractmethod 
    def area(self) :
        pass
    @abstractmethod
    def perimeter (self):
        pass
class Rectangle(Shape):
    def __init__(self, length, breadth):
        Shape.__init__(self, ‘Rectangle’)
        self.length = length 
        self.breadth = breadth
   def area (self):
       return self.length * self.breadth
    def perimeter (self):
        return 2 * (self.lenght + self.breadth)
class Circle (Shape):
    pi = 3.14
    def __init__ (self, radius):
        Shape.__init__(self, ‘Circle’)
        self.radius = radius
    def area (self):
        return round(Circle.pi * (self.radius ** 2), 2)
    def perimeter(self):
        return round (2 * Circle.pi * self.radius, 2)
__metaclass__ = ABCMeta
>>> rectangle = Rectangle (30, 15)
>>> rectangle.area ()
450
>>> rectangle.perimeter ()
90 
>>> circle = Circle (5)
>>> circle.area ()
78.5
>>> circle.perimeter ()
31.4